#!/bin/bash
#
# Input (command-line): a module name
#
# Output:
#         tags/<module_name>     (The generated tags file)
#         vim_path/<module_name> (The generated file for use in adding to Vim's 'path' variable)

SCRIPT_VERSION=1
DRY_RUN=0

# Errors
OK=0
UNKNOWN_OPTION=1
MISSING_OPTION_ARGUMENT=2
UNKNOWN_OPTION_ERROR=3
MODULE_DOES_NOT_EXIST=4

# General variables
#CPP_KINDS=cdefgmstuv-p
CPP_KINDS=cdefgmstuvp
CPP_FIELDS=+iaSmKtz
EXTRA_FIELDS=+q

# Set CTAGS_BASE_DIR to be the directory above this script.
DIR_OF_SCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CTAGS_BASE_DIR=$(dirname $DIR_OF_SCRIPT)

# Set the names of the various sub-directories.
CTAGS_IGNORE_DIR=$CTAGS_BASE_DIR/ignore
CTAGS_OUTPUT_DIR=$CTAGS_BASE_DIR/tags
CTAGS_FILES_DIR=$CTAGS_BASE_DIR/files
CTAGS_MODULE_DIR=$CTAGS_BASE_DIR/modules
CTAGS_VIM_PATH_DIR=$CTAGS_BASE_DIR/vim_path
CTAGS_EXCLUDE_DIR=$CTAGS_BASE_DIR/exclude

# Module to work with
CTAGS_MODULE_NAME=unknown

# Subroutines

generate_c_include_dirs()
{
  # This will generate a list of directories that the compiler searches for #include <...> files, one per line
  gcc -v -x c -E /dev/null 2>/dev/stdout 1>/dev/null | awk '/#include <...> search starts here:/ {flag=1; next} /End of search list./ {flag=0} flag' | cut -f 2 -d" "
}

generate_c_include_dirs_for_tags()
{
  local C_VERSION=$(gcc -dumpversion)

  # We will use this for looking in several places with this same directory structure
  local C_INCLUDE_DIR_VERSION=${CPP_VERSION}

  for dir in $(generate_c_include_dirs); do
    if [[ $dir == *"$C_INCLUDE_DIR_VERSION"* ]]; then
      echo $dir
    fi
  done
}

generate_cpp_include_dirs()
{
  # This will generate a list of directories that the compiler searches for #include <...> files, one per line
  g++ -v -x c++ -E /dev/null 2>/dev/stdout 1>/dev/null | awk '/#include <...> search starts here:/ {flag=1; next} /End of search list./ {flag=0} flag' | cut -f 2 -d" "
}

generate_cpp_include_dirs_for_tags()
{
  local CPP_VERSION=$(g++ -dumpversion)

  # We will use this for looking in several places with this same directory structure
  local CPP_INCLUDE_DIR_VERSION="c++/"${CPP_VERSION}

  for dir in $(generate_cpp_include_dirs); do
    if [[ $dir == *"$CPP_INCLUDE_DIR_VERSION"* ]]; then
      echo $dir
    fi
  done
}

# Generate a list of header files that this header file includes.
# Expects $1 to be the header file to output the dependencies of.
# cpp -x c -M /usr/include/time.h | cut -d: -f2 | sed 's/ \\$//g' - | tr \\n ' '
system_header_file_dependencies()
{
  #  For sed, first strip off the line-continuation character suffix (with preceeding space).
  #  Then strip off the leading space of the continued lines.
  #  Finally, we assume that any other spaces are the separators between filenames.  We then replace
  #  those spaces with newlines.  Voiala! We have each filename on it's own line.
  cpp -x c -M $1 | cut -d: -f2 | sed 's/ \\$//g; s/^ //g' - | tr ' ' \\n
}

# Outputs the c standard include files (absolute path), one per line.
c_standard_include_files()
{
  local DIRS_TO_SEARCH=$(generate_c_include_dirs)
  local INCLUDE_DIR=/usr/include

  for file in $(cat $(find $CTAGS_FILES_DIR -name c[[:digit:]]* -print) );do
    for dir in $(DIRS_TO_SEARCH); do
      if [[ -e $dir/$file ]]; then
        echo $dir/$file
      fi
    done
#    if [[ -e ${INCLUDE_DIR}/$i ]]; then
#      echo ${INCLUDE_DIR}/$i;
#    elif [[ -e $SYSTEM/$i ]]; then
#      echo $SYSTEM/$i
#    elif [[ -e $SYSTEM2/$i ]]; then
#      echo $SYSTEM2/$i
#    fi
  done
}

# Outputs all of the header files, and their included files, for the
# ANSI C standard headers.
c_system_include_files()
{
  (while read -r line; do
    #printf '%s\n' "$line"
    system_header_file_dependencies $line
  done <<< "$( c_standard_include_files )") | sort | uniq
}

# Input: $1 = filename containing header files, one per line.
convert_header_files_to_exclude_list()
{
  while read -r line; do
    printf '%s=%s\n' "--exclude" "$line"
  done < "$1"
}

# Used for generating a list of "--exclude=pattern" entries for the ctags program.
#
# Input: $1 = modulename containing header files, one per line.
# Output: Empty string if no exclude file exists, otherwise, an expanded string representing what to exclude.
generate_ctags_exclude_array()
{
  local EXCLUDE

  if [ -e "$CTAGS_EXCLUDE_DIR/$1" ]; then
    while read -r line; do
      EXCLUDE+=(--exclude=$line)
    done < "$CTAGS_EXCLUDE_DIR/$1"
  fi
  echo ${EXCLUDE[@]}
}

install_dir()
{
  gcc -print-search-dirs | grep "install:" | cut -d" " -f 2
}

set_system_env_var()
{
  local INSTALL_DIR=$(install_dir)

  # Needed by c_system_include_files()
  SYSTEM=${INSTALL_DIR}include

  # This may not exist on more modern setups
  SYSTEM2=${INSTALL_DIR}include-fixed
}

# Return: The filename containing the list of C headers used by the system.
generate_c_headers_list_filename()
{
  set_system_env_var

  # C
  # First, let's generate the list of headers that will be looked at and save that out to a file.
  local C_HEADERS_LIST_FILENAME=$(mktemp)

  c_system_include_files >$C_HEADERS_LIST_FILENAME
  echo $C_HEADERS_LIST_FILENAME
}

generate_c_module_tags()
{
  local MODULE_NAME="c"
  local C_HEADERS_LIST_FILENAME=$(generate_c_headers_list_filename)

  local C_TARGET=$(gcc -v 2>&1 | grep "Target:" | cut -d" " -f2)

  local MAIN_INCLUDE_DIR="/usr/include"

  local C_TARGET_DIR="$MAIN_INCLUDE_DIR/$C_TARGET"

  local INSTALL_DIR=$(install_dir)

  if [ "$DRY_RUN" == 1 ]; then
    echo Dry-run generation of $MODULE_NAME module tags...
    echo "ctags -n -f $CTAGS_OUTPUT_DIR/$MODULE_NAME --c-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS --languages=c --langmap=c:.h -I@$CTAGS_IGNORE_DIR/$MODULE_NAME -L $C_HEADERS_LIST_FILENAME"
  else
    # Actually run the command.
    echo Generating $MODULE_NAME module tags...

    rm -f $CTAGS_OUTPUT_DIR/$MODULE_NAME

    # Invoke ctags using the -L option to give the list of files to generate tags for.
    ctags -n -f $CTAGS_OUTPUT_DIR/c --c-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS --languages=c --langmap=c:.h -I@$CTAGS_IGNORE_DIR/$MODULE_NAME -L $C_HEADERS_LIST_FILENAME

    # Generate a file containing appropriate Vim "path" settings, one per line.
    echo "$MAIN_INCLUDE_DIR" >$CTAGS_VIM_PATH_DIR/$MODULE_NAME
    echo "$C_TARGET_DIR" >>$CTAGS_VIM_PATH_DIR/$MODULE_NAME

    # ASSUME: A directory that ends with "/" AND there are *.h files under it at some level.
    echo "$INSTALL_DIR**" >>$CTAGS_VIM_PATH_DIR/$MODULE_NAME

    # Now let's setup for excluding these exact files from future generation of tags.
    #readarray EXCLUDE_C_FILES < <(convert_header_files_to_exclude_list $C_HEADERS_LIST_FILENAME)
  fi

  # Erase the generated file.
  rm -f $C_HEADERS_LIST_FILENAME
}

generate_cpp_module_tags()
{
  local MODULE_NAME="cpp"

  # Generate an array containing all the directories to scan, but only for C++
  mapfile -t CPP_TAG_DIRECTORIES < <(generate_cpp_include_dirs_for_tags)

  local EXCLUDE_PATHS=$(generate_ctags_exclude_array $MODULE_NAME)

  local IGNORE_FILE=""

  if [ -e "$CTAGS_IGNORE_DIR/$MODULE_NAME" ]; then
    IGNORE_FILE="-I@$CTAGS_IGNORE_DIR/$MODULE_NAME"
  fi

  if [ "$DRY_RUN" == 1 ]; then
    echo Dry-run generation of $MODULE_NAME module tags...
    echo "ctags -n -f $CTAGS_OUTPUT_DIR/$MODULE_NAME ${EXCLUDE_PATHS[@]} --c-kinds=$CPP_KINDS --c++-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS --langmap=c++:+.tcc. --languages=c,c++ "$IGNORE_FILE" --recurse ${CPP_TAG_DIRECTORIES[@]}"
  else
    # Let's be explicit about exactly what types of tags to generate.
    # NOTE: .tcc files are C++ template files.
    # GCC System stuff <sys/cdefs.h>
    #

    echo Generating $MODULE_NAME module tags...

    # Remove the old tags file first...
    rm -f $CTAGS_OUTPUT_DIR/$MODULE_NAME

    # Hard-code in the main C++ directories to ignore via --exclude.  This allows us to provide a simple input of only a few recursive directories.
    ctags -n -f $CTAGS_OUTPUT_DIR/$MODULE_NAME ${EXCLUDE_PATHS[@]} --c-kinds=$CPP_KINDS --c++-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS --langmap=c++:+.tcc. --languages=c++ "$IGNORE_FILE" --recurse ${CPP_TAG_DIRECTORIES[@]}

    # Output the appropriate Vim "path" setting for finding these files, one per line.
    rm -f $CTAGS_VIM_PATH_DIR/$MODULE_NAME

    # We want to have all of the searched dirs here
    for dir in $(generate_cpp_include_dirs); do
      echo "$dir" >>$CTAGS_VIM_PATH_DIR/$MODULE_NAME
    done
  fi

  # Cleanup
  unset CPP_TAG_DIRECTORIES
}

# Used for generating the tags for a generic "module".
#
# Input: $1 = modulename
generatetagsformodule()
{
  local module=$1

  if [ "$module" == "c" ]; then
    generate_c_module_tags
  elif [ "$module" == "cpp" ]; then
    generate_cpp_module_tags
  else
    # Normal module...
    local module_filename=$CTAGS_MODULE_DIR/$module

    # Check to see if we even have data for the module.
    if [ -e "$module_filename" ]; then
      # Module file exists!
      local module_input_files=$(cat $module_filename | grep INPUT_FILES: | cut -d: -f2)
      local module_input_directory=$(cat $module_filename | grep INPUT_DIRECTORY: | cut -d: -f2)
      local module_ignore_files=$(cat $module_filename | grep IGNORE: | cut -d: -f2)
      local module_path_outputs_array=($(cat $module_filename | grep PATH: | cut -d: -f2))
      local module_output_filename=$CTAGS_OUTPUT_DIR/$module
      local module_output_filename_option="-f $module_output_filename"

      # Go ahead and set the input files.  Change it if it is actually a directory later.
      local module_input_files_option=$module_input_files
    else
      echo "Module $module does not exist"
      exit $MODULE_DOES_NOT_EXIST
    fi

    # Check to see if we need to add the recursive option (we have a directory as input).
    # IF $module_input_directory string length is > 0...
    if [[ ${#module_input_directory} > 0 ]]; then
      local module_recursive_option="--recurse"
      module_input_files_option=$module_input_directory
    fi

    echo "module ignore file = \"${module_ignore_files:+${module_ignore_files}}\""

    # Check to see if we need to ignore special tags in the module.
    if [[ ${#module_ignore_files} == 0 ]]; then
      # No ignore command specified in the module file.  Check for the existence of a module file.
      if [ -e "$CTAGS_IGNORE_DIR/$module" ]; then
        # We have one.  Ignore stuff in it.
        local module_ignoretags_filename=$CTAGS_IGNORE_DIR/$module
        local module_ignore_file_option="-I@$module_ignoretags_filename"
      fi
    else
      # We have a specific ignore file.  Let's set the ignore option to that.
      local module_ignoretags_filename=$CTAGS_IGNORE_DIR/$module_ignore_files
      local module_ignore_file_option="-I@$module_ignoretags_filename"
    fi

    echo "module = $module"
    echo "input files = \"$module_input_files\""
    echo "input directory = \"$module_input_directory\""
    echo "output file = \"$module_output_filename\""
    echo "module input files = \"$module_input_files_option\""
    echo "module recursive option = \"$module_recursive_option\""
    echo "module igonore file option = \"$module_ignore_file_option\""
    echo "module path output = \"${module_path_outputs_array[@]}\""

    if [ "$DRY_RUN" == 1 ]; then
      echo Dry-run generation of $module module tags...
      echo "ctags -n $module_output_filename_option --c++-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS ${module_ignore_file_option:+${module_ignore_file_option}} ${module_recursive_option:+${module_recursive_option}} $module_input_files_option"
    else
      echo Generating $module module tags...
      ctags -n $module_output_filename_option --c++-kinds=$CPP_KINDS --fields=$CPP_FIELDS --extra=$EXTRA_FIELDS ${module_ignore_file_option:+${module_ignore_file_option}} ${module_recursive_option:+${module_recursive_option}} $module_input_files_option

      # Output the appropriate Vim "path" setting for finding these files, one per line.
      rm -f $CTAGS_VIM_PATH_DIR/$module

      for path_name in ${module_path_outputs_array[@]}; do
        echo "$path_name" >>$CTAGS_VIM_PATH_DIR/$module
      done
    fi
  fi
}
# END of Subroutines

printsynopsis()
{
  echo "Usage: createtags [OPTIONS] <module_name>"
  echo ""
  echo "NOTE: The c module represents the header files for the C compilation environment."
  echo "      The cpp module represents the header files for the C++ compilation environment."
  echo
  echo "OPTIONS"
  echo "  -l    List module names"
  echo "  -n    Print the command that would be executed instead of running it"
  echo "  -v    Output version number"
  echo "  -r    Print return values"
}

printversion()
{
  echo $SCRIPT_VERSION
}

printreturnvalues()
{
  echo "$OK = OK"
  echo "$UNKNOWN_OPTION = UNKNOWN_OPTION"
  echo "$MISSING_OPTION_ARGUMENT = MISSING_OPTION_ARGUMENT"
  echo "$UNKNOWN_OPTION_ERROR = UNKNOWN_OPTION_ERROR"
  echo "$MODULE_DOES_NOT_EXIST = MODULE_DOES_NOT_EXIST"
}

printmodules()
{
  # Ignore README file.
  # c and cpp modules are built-ins that are always available.
  MODULES=("c" "cpp" $(ls -I README $CTAGS_MODULE_DIR))

  # There will ALWAYS be at least the "c" and "cpp" modules, so we can just print here.
  echo ${MODULES[@]}
}

setoptions()
{
  if [ $# == 0 ]; then
    printsynopsis
    exit 0
  fi
  while getopts "hvrln" optname
    do
      case "$optname" in
        "?")
          echo "Unknown option $OPTARG"
          exit $UNKNOWN_OPTION
          ;;
        "h")
          printsynopsis
          exit $OK
          ;;
        "v")
          printversion
          exit $OK
          ;;
        "r")
          printreturnvalues
          exit $OK
          ;;
        "l")
          printmodules
          exit $OK
          ;;
        "n")
          DRY_RUN=1
          ;;
        ";")
          echo "No argument value for option $OPTARG"
          exit $MISSING_OPTION_ARGUMENT
          ;;
        *)
          # Should not occur
          echo "Unknown error while processing options"
          exit $UNKNOWN_OPTION_ERROR
          ;;
      esac
    done
  return $OPTIND
}

echo $(generate_c_include_dirs)
exit
setoptions "$@"
argstart=$?

# Get the module name
CTAGS_MODULE_NAME=${@:$argstart:${#argstart}}

generatetagsformodule $CTAGS_MODULE_NAME

exit $OK
